using Clustering
function calculating_clustered_units(units, DataGen, GenCost, UnitsFreqParam)
    # X = indexin(unique(units.p_max), units.p_max)
    # condition = map(x -> in(x, unique(units.p_max)), DataGen[:, 3] / 100)
    # DataGen[condition, :]

    # X                       = kmeans(units.p_max', 3; maxiter = 200, display = :iter)
    # clusting_units_location = assignments(X)
    # clusting_units_number   = counts(X)
    # condition               = unique(clusting_units_location)
    # clusting_units_number   = clusting_units_number[condition, :]

    # clustered_DataGen, clustered_GenCost, clustered_UnitsFreqParam =
    #     zeros(size(condition, 1), size(DataGen, 2)),
    #     zeros(size(condition, 1), size(GenCost, 2)),
    #     zeros(size(condition, 1), size(UnitsFreqParam, 2))
    # for iter in 1:size(condition, 1)
    #     clustered_DataGen[iter, :], clustered_GenCost[iter, :], clustered_UnitsFreqParam[iter, :] =
    #     DataGen[condition[iter], :],
    #     GenCost[condition[iter], :],
    #     UnitsFreqParam[condition[iter], :]
    # end

    # X = indexin(unique(units.p_max), units.p_max)
    # condition = map(x -> in(x, unique(units.p_max)), DataGen[:, 3] / 100)
    # DataGen[condition, :]

    # X = kmeans(units.p_max', 54; maxiter=100, display=:iter)
    X = kmeans(units.p_max', 3; maxiter=100, display=:none)
    clusting_units_location = assignments(X)
    # clusting_units_number   = counts(X)
    condition = unique(clusting_units_location)

    clustered_DataGen, clustered_GenCost, clustered_UnitsFreqParam =
        zeros(size(condition, 1), size(DataGen, 2)), zeros(size(condition, 1), size(GenCost, 2)), zeros(size(condition, 1), size(UnitsFreqParam, 2))
    cluster_number = size(condition, 1)
    cluster_featurematrix = zeros(cluster_number, NG)
    cluster_cunitsset = zeros(cluster_number, 1)
    for c in 1:cluster_number
        for j in 1:NG
            if clusting_units_location[j, 1] == condition[c, 1]
                cluster_featurematrix[c, j] = 1
            end
        end
        cluster_cunitsset[c, 1] = Int64(sum(cluster_featurematrix[c, :]))
    end
    for c in 1:cluster_number
        tem = findfirst(tem -> tem == 1, cluster_featurematrix[c, :])
        clustered_DataGen[c, :] = DataGen[tem, :]
        clustered_GenCost[c, :] = GenCost[tem, :]
        clustered_UnitsFreqParam[c, :] = UnitsFreqParam[tem, :]
    end

    clustered_units = form_clustered_units(
        clustered_DataGen, clustered_GenCost, clustered_UnitsFreqParam, cluster_cunitsset[:, 1]
    )
    return clustered_units, size(condition, 1), cluster_cunitsset, cluster_featurematrix
end


struct clustered_unit
    index::Vector{Int64}
    locatebus::Vector{Int64}
    p_max::Vector{Float64}
    p_min::Vector{Float64}
    ramp_up::Vector{Float64}
    ramp_down::Vector{Float64}
    shut_up::Vector{Float64}
    shut_down::Vector{Float64}
    min_shutup_time::Vector{Float64}
    min_shutdown_time::Vector{Float64}
    x_0::Vector{Float64}
    t_0::Vector{Float64}
    p_0::Vector{Float64}
    coffi_a::Vector{Float64}
    coffi_b::Vector{Float64}
    coffi_c::Vector{Float64}
    coffi_cold_shutup_1::Vector{Float64}
    coffi_cold_shutup_2::Vector{Float64}
    coffi_cold_shutdown_1::Vector{Float64}
    coffi_cold_shutdown_2::Vector{Float64}
    Hg::Vector{Float64} # interia constant of conventional units
    Dg::Vector{Float64} # damping constant
    Kg::Vector{Float64} # Mechnical power gain of conventional units
    Fg::Vector{Float64} # Fraction of total power generated by the turbine of conventional units
    Tg::Vector{Float64} # time constant
    Rg::Vector{Float64} # Droop grain of conventional units
    number::Vector{Int64}

    function clustered_unit(
        index,
        locatebus,
        p_max,
        p_min,
        ramp_up,
        ramp_down,
        shut_up,
        shut_down,
        min_shutup_time,
        min_shutdown_time,
        x_0,
        t_0,
        p_0,
        coffi_a,
        coffi_b,
        coffi_c,
        coffi_cold_shutup_1,
        coffi_cold_shutup_2,
        coffi_cold_shutdown_1,
        coffi_cold_shutdown_2,
        Hg,
        Dg,
        Kg,
        Fg,
        Tg,
        Rg,
        number,
    )
        clusting_units = new(
            index,
            locatebus,
            p_max,
            p_min,
            ramp_up,
            ramp_down,
            shut_up,
            shut_down,
            min_shutup_time,
            min_shutdown_time,
            x_0,
            t_0,
            p_0,
            coffi_a,
            coffi_b,
            coffi_c,
            coffi_cold_shutup_1,
            coffi_cold_shutup_2,
            coffi_cold_shutdown_1,
            coffi_cold_shutdown_2,
            Hg,
            Dg,
            Kg,
            Fg,
            Tg,
            Rg,
            number,
        )
        return clusting_units
    end
end

function form_clustered_units(DataGen, GenCost, UnitsFreqParam, cluster_number)
    NB = Int64(maximum([maximum(DataBranch[:, 2]), maximum(DataBranch[:, 3])]))::Int64
    NL = Int64(size(DataBranch)[1])::Int64
    NG = Int64(size(DataGen)[1])::Int64
    ND = Int64(size(DataLoad)[1])::Int64
    NC = Int64(size(StrogeData)[1])::Int64
    NT = size(LoadCurve, 1)::Int64
    Gens_Index = convert(Array{Int64}, DataGen[:, 1])
    Gens_LocateBus = convert(Array{Int64}, DataGen[:, 2])
    Gens_Pmax = DataGen[:, 3] / 100
    Gens_Pmin = DataGen[:, 4] / 100
    Gens_RD = DataGen[:, 5] / 100
    Gens_RU = DataGen[:, 6] / 100
    Gens_SD = DataGen[:, 7] / 100
    Gens_SU = DataGen[:, 8] / 100
    Gens_TU = DataGen[:, 9]
    Gens_TD = DataGen[:, 10]
    Gens_x0 = DataGen[:, 11]
    Gens_t0 = DataGen[:, 12]
    Gens_p0 = DataGen[:, 13] / 100
    Gens_c = GenCost[:, 2]
    Gens_b = GenCost[:, 3] * 1e2
    Gens_a = GenCost[:, 4] * 1e4
    Gens_CD = GenCost[:, 5]
    Gens_CU = GenCost[:, 6]
    Gens_CU1 = GenCost[:, 7]
    Gens_Cold = GenCost[:, 8]
    Hg = UnitsFreqParam[:, 2]
    Dg = UnitsFreqParam[:, 3]
    Kg = UnitsFreqParam[:, 4]
    Fg = UnitsFreqParam[:, 5]
    Tg = UnitsFreqParam[:, 6]
    Rg = UnitsFreqParam[:, 7]

    newunits = clustered_unit(
        Gens_Index,
        Gens_LocateBus,
        Gens_Pmax,
        Gens_Pmin,
        Gens_RU,
        Gens_RD,
        Gens_SU,
        Gens_SD,
        Gens_TU,
        Gens_TD,
        Gens_x0,
        Gens_t0,
        Gens_p0,
        Gens_a,
        Gens_b,
        Gens_c,
        Gens_CU,
        Gens_CU1,
        Gens_CD,
        Gens_Cold,
        Hg,
        Dg,
        Kg,
        Fg,
        Tg,
        Rg,
        cluster_number,
    )

    return newunits
end
